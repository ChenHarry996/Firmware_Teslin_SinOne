C51 COMPILER V9.54   DRV_PWM                                                               03/10/2021 14:40:17 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE DRV_PWM
OBJECT MODULE PLACED IN DRV_PWM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE c\DRV_PWM.c COMPACT OMF2 OPTIMIZE(8,SIZE) BROWSE DEFINE(XUART_LOG,XMOTOR
                    -_PARAM_TEST,TIME2_ENABLE,XDC_INTERRUPT,VIB_TIME_ENABLE,FOUR_BUTTON,xLOWPOWER_DISABLEMOTOR) DEBUG PRINT(.\DRV_PWM.lst) TA
                    -BS(2) OBJECT(DRV_PWM.obj)

line level    source

   1          /*******************************************************************
   2          Copyright 
   3          File name: DRV_PWM.c
   4          Author:    Harry.Chen
   5          ID: 
   6          Version: 
   7          Date: 
   8          Description: 
   9          Others: 
  10          History: 
  11              1.  Date:
  12                Author: 
  13                ID:
  14                Modification:
  15              2.  Date:
  16                Author: 
  17                ID:
  18                Modification:
  19          *******************************************************************/
  20          
  21          #include "H/Function_Init.H"
  22          
  23          
  24          
  25          
  26          STATIC USHORT usPATPWMDutyTimerValue = 0;
  27          STATIC USHORT usVIBPWMDutyTimerValue = 0;
  28          
  29          /**************************************************************************
  30          * @function name:     PWM_Init
  31          * @Description:       Initial PWM Resgister
  32          * @param:     
  33          * @return:            NA         
  34          * @Author:      
  35          * @Date:      
  36          ***************************************************************************/
  37          void PWM_Init(void)
  38          {
  39   1      #ifdef VIB_TIME_ENABLE
  40   1      
  41   1      #else
              #ifdef TIME2_ENABLE
                PWMCON  = 0x12;     //PWM output to P0.1£¬PWM CLK is Fsys/4
                  //PWMCON  = 0x17;
              #else
                PWMCON  = 0x1A;     //PWM output to P0.1, P0.0£¬PWM timer is Fsys/4
              #endif
                
                PWMPRD  = 98;       //PWM period=(98+1)*(1/3us)=33us  ;
                PWMCFG  = 0x00;     //PWM output not reverse, PWM output to P0.0,P0.1,P0.2
                PWMDTY0 = 0;        //P0.0 PWM0 Duty
                PWMDTY1 = 0;        //P0.1 PWM1 Duty 
                //PWMDTY2 = 10;     //P0.2 PWM2 Duty 
C51 COMPILER V9.54   DRV_PWM                                                               03/10/2021 14:40:17 PAGE 2   

                PWMDTYA = 0x00;
                PWMCON |= 0x80;     //Open PWM
                IE1 |= 0x00;        //Open PWM interrupt
                //EA = 1;
              #endif
  59   1      }
  60          
  61          /**************************************************************************
  62          * @function name:     PWM Interrupt
  63          * @Description:     
  64          * @param:     
  65          * @return:            NA         
  66          * @Author:      
  67          * @Date:      
  68          ***************************************************************************/
  69          void PWMInt(void) interrupt 8
  70          { 
  71   1        //P20=~P20;   
  72   1      }
  73          
  74          /**************************************************************************
  75          * @function name:     PATMotorDutySet
  76          * @Description:       Set resgister value
  77          * @param:             ucPWMDuty - The PWM Duty cycle will be set.
  78          * @return:            NA
  79          * @Author:      
  80          * @Date:      
  81          ***************************************************************************/
  82          void PATMotorDutySet(UCHAR ucPWMDuty)
  83          {
  84   1      #ifdef TIME2_ENABLE
  85   1        
  86   1        if(ucPWMDuty == 0)
  87   1        {
  88   2          /*if(TR2 == 1)
  89   2          {
  90   2            TR2 = 0;
  91   2          }*/
  92   2          PAT_MOTOR = 0;
  93   2          usPATPWMDutyTimerValue = 0;
  94   2          return;
  95   2        }
  96   1        else
  97   1        {
  98   2          if(TR2 == 0)
  99   2          {
 100   3            TR2 = 1;
 101   3          }
 102   2          usPATPWMDutyTimerValue = (PAT_MOTOR_FREQUENCE * (USHORT)ucPWMDuty)/100;   
 103   2        }
 104   1        return;
 105   1      #else
                USHORT usPWMResgisterValue = 0;
                UCHAR ucPWMPRDResgisterValue = 0;
                
                ucPWMPRDResgisterValue = PWMPRD;
                usPWMResgisterValue = ((USHORT)(ucPWMDuty*(ucPWMPRDResgisterValue+1)))/100;
                
                if(usPWMResgisterValue == PWMDTY0)
                {
                  return;
                }
C51 COMPILER V9.54   DRV_PWM                                                               03/10/2021 14:40:17 PAGE 3   

                PWMDTY0 = usPWMResgisterValue;
              
                return;
              #endif  
 120   1      }
 121          
 122          /**************************************************************************
 123          * @function name:     VIBMotorDutySet
 124          * @Description:       Set resgister value
 125          * @param:             ucPWMDuty - The PWM Duty cycle will be set.
 126          * @return:            NA               
 127          * @Author:      
 128          * @Date:      
 129          ***************************************************************************/
 130          void VIBMotorDutySet(UCHAR ucPWMDuty)
 131          {
 132   1       #ifdef VIB_TIME_ENABLE
 133   1        
 134   1        if(ucPWMDuty == 0)
 135   1        {
 136   2          VIB_MOTOR = 0;
 137   2          usVIBPWMDutyTimerValue = 0;
 138   2          return;
 139   2        }
 140   1        else
 141   1        {
 142   2          if(TR2 == 0)
 143   2          {
 144   3            TR2 = 1;
 145   3          }
 146   2          usVIBPWMDutyTimerValue = (VIB_MOTOR_FREQUENCE * (USHORT)ucPWMDuty)/100;   
 147   2        }
 148   1        return;
 149   1      #else
                USHORT usPWMResgisterValue = 0;
                UCHAR ucPWMPRDResgisterValue = 0;
                
                ucPWMPRDResgisterValue = PWMPRD;
                usPWMResgisterValue = ((USHORT)(ucPWMDuty*(ucPWMPRDResgisterValue+1)))/100;
                
                if(usPWMResgisterValue == PWMDTY1)
                {
                  return;
                }
                PWMDTY1 = usPWMResgisterValue;
                
                return;
              #endif
 164   1      }
 165          
 166          /**************************************************************************
 167          * @function name:     PATMotorDutyCycleRegisterValueGet
 168          * @Description:       
 169          * @param:     
 170          * @return:            PAT Motor Duty Cuycle
 171          * @Author:      
 172          * @Date:      
 173          ***************************************************************************/
 174          UCHAR PATMotorDutyCycleRegisterValueGet(void)
 175          {
 176   1      #ifdef TIME2_ENABLE
 177   1        return ((UCHAR)usPATPWMDutyTimerValue);
C51 COMPILER V9.54   DRV_PWM                                                               03/10/2021 14:40:17 PAGE 4   

 178   1      #else
                USHORT usPATPWMDutyCycleRegister = 0;
                UCHAR ucPWMPRDResgisterValue = 0;
                UCHAR ucPWMDUTYResgisterValue = 0;
                
                ucPWMPRDResgisterValue = PWMPRD;
                ucPWMDUTYResgisterValue = PWMDTY0;
                usPATPWMDutyCycleRegister = (USHORT)(ucPWMDUTYResgisterValue*100)/(ucPWMPRDResgisterValue+1);
                
                return ((UCHAR)usPATPWMDutyCycleRegister);
              #endif
 189   1      }
 190          
 191          /**************************************************************************
 192          * @function name:     VIBMotorDutyCycleRegisterValueGet
 193          * @Description:     
 194          * @param:     
 195          * @return:            VIB Motor Duty Cycle           
 196          * @Author:      
 197          * @Date:      
 198          ***************************************************************************/
 199          UCHAR VIBMotorDutyCycleRegisterValueGet(void)
 200          {
 201   1      #ifdef VIB_TIME_ENABLE
 202   1        return ((UCHAR)usVIBPWMDutyTimerValue);
 203   1      #else
                USHORT usVIBPWMDutyCycleRegister = 0;
                UCHAR ucPWMPRDResgisterValue = 0;
                UCHAR ucPWMDUTYResgisterValue = 0;
                
                ucPWMPRDResgisterValue = PWMPRD;
                ucPWMDUTYResgisterValue = PWMDTY1;
                
                usVIBPWMDutyCycleRegister = (USHORT)(ucPWMDUTYResgisterValue*100)/(ucPWMPRDResgisterValue+1);
                
                return ((UCHAR)usVIBPWMDutyCycleRegister);
              #endif
 215   1      }
 216          /**************************************************************************
 217          * @function name:     PWM_Stop
 218          * @Description:
 219          * @param:
 220          * @return:          Stop PWM generate
 221          * @Author:
 222          * @Date:
 223          ***************************************************************************/
 224          void PWM_Stop(void)
 225          {
 226   1        if(TR2 == 1)
 227   1        {
 228   2          TR2 = 0;
 229   2        }
 230   1        
 231   1        PWMCON = 0x00;     //Close PWM
 232   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    102    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      4    ----
C51 COMPILER V9.54   DRV_PWM                                                               03/10/2021 14:40:17 PAGE 5   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
