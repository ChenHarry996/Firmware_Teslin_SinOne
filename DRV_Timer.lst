C51 COMPILER V9.54   DRV_TIMER                                                             03/10/2021 14:40:17 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE DRV_TIMER
OBJECT MODULE PLACED IN DRV_Timer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE c\DRV_Timer.c COMPACT OMF2 OPTIMIZE(8,SIZE) BROWSE DEFINE(XUART_LOG,XMOT
                    -OR_PARAM_TEST,TIME2_ENABLE,XDC_INTERRUPT,VIB_TIME_ENABLE,FOUR_BUTTON,xLOWPOWER_DISABLEMOTOR) DEBUG PRINT(.\DRV_Timer.lst
                    -) TABS(2) OBJECT(DRV_Timer.obj)

line level    source

   1          /*******************************************************************
   2          Copyright 
   3          File name: DRV_Timer.c
   4          Author:    Harry.Chen
   5          ID: 
   6          Version: 
   7          Date: 
   8          Description: 
   9          Others: 
  10          History: 
  11              1.  Date:
  12                Author: 
  13                ID:
  14                Modification:
  15              2.  Date:
  16                Author: 
  17                ID:
  18                Modification:
  19          *******************************************************************/
  20          
  21          #include "H/Function_Init.H"
  22          
  23          UCHAR ucPATDutyCycleCount = 0;
  24          UCHAR ucVIBDutyCycleCount = 0;
  25          
  26          STATIC void PATMotorTimeRun(void);
  27          STATIC void VIBMotorTimeRun(void);
  28          /**************************************************************************
  29          * @function name:     Timer_Init
  30          * @Description:       T0/T1/T2 Init
  31          * @param:     
  32          * @return:            NA
  33          * @Author:      
  34          * @Date:      
  35          ***************************************************************************/
  36          void Timer_Init(void)
  37          { 
  38   1        TMCON = 0X06;    //------111 ;Timer0¡¢Tiemr1 and Tiemr2 select CLK Fsys
  39   1        
  40   1        //T0 Set
  41   1        TMOD |= 0x01;                 //0000 0001;Timer0 register mode 1
  42   1        TL0 = (65536 - 5000)%256;    //Overflow time£ºCLK is Fsys/12£¬10000*£¨1/Fsys£©=5ms;
  43   1        TH0 = (65536 - 5000)/256;
  44   1        TR0 = 0;
  45   1        ET0 = 1;//Enable Timer 0
  46   1        TR0 = 1;//Open Timer 0
  47   1      
  48   1        #if 0
                /*Select Timer1 as the baud rate signal generator*/
                //T1 Set
                TMOD |= 0x20;            //0010 0000;Timer1 register mode 2
                TL1 = 256 - 240;   //Overflow time£ºCLK is Fsys£¬240*£¨1/Fsys£©=10us;
                TH1 = 256 - 240;
C51 COMPILER V9.54   DRV_TIMER                                                             03/10/2021 14:40:17 PAGE 2   

                TR1 = 0;
                ET1 = 1;//Enable Timer 1
                TR1 = 1;//Open Timer 1    
                #endif
  58   1      
  59   1      #ifdef TIME2_ENABLE 
  60   1        //T2 Set
  61   1        T2MOD = 0x00;
  62   1        T2CON = 0x00;  //Set to 16 bit overloaded register
  63   1        RCAP2H = (65536-12000)/256;     //Overflow time£ºCLK is Fsys£¬12000*£¨1/Fsys£©=1ms;
  64   1        RCAP2L = (65536-12000)%256;
  65   1        TR2 = 0;
  66   1        ET2 = 1;//Enable Timer 2
  67   1        TR2 = 0;//Open Timer 2    
  68   1      #endif
  69   1      
  70   1        EA = 1; 
  71   1      }
  72          
  73          /**************************************************************************
  74          * @function name:     timer0/1/2() interrupt 1/3/5
  75          * @Description:       Set system clock frequency Timer0 5MS Timer1 1MS
  76          * @param:     
  77          * @return:            NA
  78          * @Author:      
  79          * @Date:      
  80          ***************************************************************************/
  81          void timer0() interrupt 1
  82          {
  83   1      
  84   1        TL0 = (65536 - 5000)%256;   // 5MS
  85   1        TH0 = (65536 - 5000)/256;
  86   1      
  87   1      #ifdef MOTOR_PARAM_TEST
                
              #else
  90   1        BatterySampleFrequence();
  91   1        PowerButtonDebounce();
  92   1        ButtonBoardsCount();
  93   1        MotorSmoothUpdateEnable();
  94   1        WatchDogClear();
  95   1        DeviceAutoOffCount();
  96   1      #endif
  97   1        
  98   1      }
  99          /*
 100          void timer1() interrupt 3
 101          {
 102            P21 = ~P21;
 103          }
 104          */
 105          
 106          
 107          void Timer2Int(void) interrupt 5
 108          {   
 109   1      #ifdef TIME2_ENABLE 
 110   1        
 111   1          PATMotorTimeRun();
 112   1          VIBMotorTimeRun();
 113   1      
 114   1        TF2 = 0;   //Clear overflow   
 115   1      #endif
C51 COMPILER V9.54   DRV_TIMER                                                             03/10/2021 14:40:17 PAGE 3   

 116   1      }
 117          
 118          /**************************************************************************
 119          * @function name:     Delay_ms
 120          * @Description:     Set system clock frequency
 121          * @param:     
 122          * @return:        NA           
 123          * @Author:      
 124          * @Date:      
 125          ***************************************************************************/
 126          void Delay_ms(USHORT usPara)
 127          {
 128   1        USHORT usDelayClk=0;
 129   1      
 130   1        for(;usPara>0;usPara--)
 131   1        {
 132   2            for (usDelayClk = 0;usDelayClk < 1200;usDelayClk++)
 133   2            {
 134   3      
 135   3            }
 136   2        }
 137   1      }
 138          /**************************************************************************
 139          * @function name:     WatchDogInit
 140          * @Description:       Initial WatchDog Register
 141          * @param:     
 142          * @return:            NA         
 143          * @Author:      
 144          * @Date:      
 145          ***************************************************************************/
 146          void WatchDogInit(void)
 147          {
 148   1        OPINX = 0XC1;  // Watch Dog register.
 149   1        OPREG |= 0X80;
 150   1        WDTCON |= 0x10;    //Clear Watch Dog
 151   1        return;
 152   1      }
 153          
 154          /**************************************************************************
 155          * @function name:     WatchDogStop
 156          * @Description:       Stop WatchDog to enter into Low Power
 157          * @param:     
 158          * @return:            NA   
 159          * @Author:      
 160          * @Date:      
 161          ***************************************************************************/
 162          void WatchDogStop(void)
 163          {
 164   1        OPINX  = 0XC1;  // Watch Dog register.
 165   1        OPREG &=~ 0X80 ;
 166   1        
 167   1        ucPATDutyCycleCount = 0;
 168   1        return;
 169   1      }
 170          
 171          /**************************************************************************
 172          * @function name:     WatchDogClear
 173          * @Description:       Clear WatchDog
 174          * @param:     
 175          * @return:            NA         
 176          * @Author:      
 177          * @Date:      
C51 COMPILER V9.54   DRV_TIMER                                                             03/10/2021 14:40:17 PAGE 4   

 178          ***************************************************************************/
 179          void WatchDogClear(void)
 180          {
 181   1        WDTCON |= 0x10;    //Clear Watch Dog
 182   1        
 183   1        return;
 184   1      }
 185          /**************************************************************************
 186          * @function name:     PATMotorTimeRun
 187          * @Description:     Use Timer2 to toggle PAT Port
 188          * @param:     
 189          * @return:            NA         
 190          * @Author:      
 191          * @Date:      
 192          ***************************************************************************/
 193          void PATMotorTimeRun(void)
 194          {
 195   1          if(0 == PATMotorDutyCycleRegisterValueGet())
 196   1          {
 197   2              ucPATDutyCycleCount = 0;
 198   2          }
 199   1          else
 200   1          {    
 201   2              ucPATDutyCycleCount++;
 202   2              if((ucPATDutyCycleCount >= PATMotorDutyCycleRegisterValueGet()) && (ucPATDutyCycleCount < PAT_MOTO
             -R_FREQUENCE))
 203   2              {   
 204   3                  PAT_MOTOR = 0;
 205   3              }
 206   2              else if(ucPATDutyCycleCount >= PAT_MOTOR_FREQUENCE)
 207   2              {
 208   3                  ucPATDutyCycleCount = 0;
 209   3                  PAT_MOTOR = 1;
 210   3              }
 211   2          }
 212   1          return;
 213   1      }
 214          /**************************************************************************
 215          * @function name:     VIBMotorTimeRun
 216          * @Description:     Use Timer2 to toggle VIBs Port
 217          * @param:     
 218          * @return:            NA         
 219          * @Author:      
 220          * @Date:      
 221          ***************************************************************************/
 222          void VIBMotorTimeRun(void)
 223          {
 224   1      #ifdef VIB_TIME_ENABLE
 225   1          if(0 == VIBMotorDutyCycleRegisterValueGet())
 226   1          {
 227   2              ucVIBDutyCycleCount = 0;
 228   2          }
 229   1          else
 230   1          {
 231   2              ucVIBDutyCycleCount++;
 232   2              if((ucVIBDutyCycleCount >= VIBMotorDutyCycleRegisterValueGet()) && (ucVIBDutyCycleCount < VIB_MOTO
             -R_FREQUENCE))
 233   2              {   
 234   3                  VIB_MOTOR = 0;
 235   3              }
 236   2              else if(ucVIBDutyCycleCount >= VIB_MOTOR_FREQUENCE)
 237   2              {
C51 COMPILER V9.54   DRV_TIMER                                                             03/10/2021 14:40:17 PAGE 5   

 238   3                  ucVIBDutyCycleCount = 0;
 239   3                  VIB_MOTOR = 1;
 240   3              }
 241   2          }
 242   1      #endif
 243   1          return;
 244   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    338    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      2    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
