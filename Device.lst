C51 COMPILER V9.54   DEVICE                                                                03/10/2021 14:40:16 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE DEVICE
OBJECT MODULE PLACED IN Device.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE c\Device.c COMPACT OMF2 OPTIMIZE(8,SIZE) BROWSE DEFINE(XUART_LOG,XMOTOR_
                    -PARAM_TEST,TIME2_ENABLE,XDC_INTERRUPT,VIB_TIME_ENABLE,FOUR_BUTTON,xLOWPOWER_DISABLEMOTOR) DEBUG PRINT(.\Device.lst) TABS
                    -(2) OBJECT(Device.obj)

line level    source

   1          /*******************************************************************
   2          Copyright 
   3          File name: Device.c
   4          Author:    Harry.Chen
   5          ID: 
   6          Version: 
   7          Date: 
   8          Description: 
   9          Others: 
  10          History: 
  11              1.  Date:
  12                Author: 
  13                ID:
  14                Modification:
  15              2.  Date:
  16                Author: 
  17                ID:
  18                Modification:
  19          *******************************************************************/
  20          #include "H/Function_Init.H"
  21          
  22          STATIC DEVICE_APP_STATE_E enDeviceAppState = DEVICE_APP_STATE_SLEEP;
  23          STATIC DEVICE_APP_MODUS_E  enDeviceAppModus = DEVICE_APP_MODUS_BOTT;
  24          
  25          STATIC BOOL boIsDeviceWorkWithTouch    = FALSE;
  26          STATIC BOOL boIsDeviceWorkWithoutTouch = FALSE;
  27          STATIC UCHAR ucMotorMode = 0;
  28          STATIC USHORT usDeviceAutoOff_TenMin1 = 0;   
  29          STATIC UCHAR  ucDeviceAutoOff_TenMin2 = 0;   
  30          STATIC USHORT usDeviceAutoOff_FiveMin = 0;
  31          /**************************************************************************
  32          * @function name:     DeviceApp_GetSystemState
  33          * @Description:     
  34          * @param:     
  35          * @return:      system State
  36          * @Author:      
  37          * @Date:      
  38          ***************************************************************************/
  39          DEVICE_APP_STATE_E DeviceApp_GetSystemState(void)
  40          {
  41   1          return enDeviceAppState;
  42   1      }
  43          
  44          /**************************************************************************
  45          * @function name:     DeviceApp_SetAppState
  46          * @Description:       Set system state
  47          * @param:             DEVICE_APP_STATE_E enAppState
  48          * @return:            NA
  49          * @Author:      
  50          * @Date:      
  51          ***************************************************************************/
  52          void DeviceApp_SetAppState(DEVICE_APP_STATE_E enAppState)
  53          {
C51 COMPILER V9.54   DEVICE                                                                03/10/2021 14:40:16 PAGE 2   

  54   1          if (enAppState == enDeviceAppState)
  55   1          {
  56   2              return;
  57   2          }
  58   1      
  59   1          enDeviceAppState = enAppState;
  60   1      
  61   1          return;
  62   1      }
  63          /**************************************************************************
  64          * @function name:     DeviceApp_GetSystemModus
  65          * @Description:     
  66          * @param:     
  67          * @return:          enDeviceAppModus
  68          * @Author:      
  69          * @Date:      
  70          ***************************************************************************/
  71          DEVICE_APP_MODUS_E DeviceApp_GetModus(void)
  72          {
  73   1          return enDeviceAppModus;
  74   1      }
  75          
  76          /**************************************************************************
  77          * @function name:     DeviceApp_SetAppModus
  78          * @Description:       Set device current Modus state
  79          * @param:     
  80          * @return:      NA
  81          * @Author:      
  82          * @Date:      
  83          ***************************************************************************/
  84          void DeviceApp_SetAppModus(DEVICE_APP_MODUS_E enAppModus)
  85          {
  86   1          if (enAppModus == enDeviceAppModus)
  87   1          {
  88   2              return;
  89   2          }
  90   1        //TimerUartSendString("DEVICE_APP_MODUS_ONE\r\n");
  91   1          enDeviceAppModus = enAppModus;
  92   1      
  93   1          return;
  94   1      }
  95          /**************************************************************************
  96          * @function name:     DeviceApp_GetSystemMode
  97          * @Description:     
  98          * @param:     
  99          * @return:      ucMotorMode
 100          * @Author:      
 101          * @Date:      
 102          ***************************************************************************/
 103          UCHAR DeviceApp_GetMotorMode(void)
 104          {
 105   1          return ucMotorMode;
 106   1      }
 107          
 108          /**************************************************************************
 109          * @function name:     DeviceApp_SetAppMode
 110          * @Description:       Set motor mode in different modus
 111          * @param:     
 112          * @return:      NA
 113          * @Author:      
 114          * @Date:      
 115          ***************************************************************************/
C51 COMPILER V9.54   DEVICE                                                                03/10/2021 14:40:16 PAGE 3   

 116          void DeviceApp_SetMotorMode(void)
 117          {
 118   1        if( DEVICE_APP_STATE_SLEEP == DeviceApp_GetSystemState())
 119   1        {
 120   2          ucMotorMode=0;
 121   2          DeviceApp_SetAppModus(DEVICE_APP_MODUS_ONE);
 122   2          //TimerUartSendString("DEVICE_APP_STATE_SLEEP\r\n");
 123   2          return;
 124   2        }
 125   1         
 126   1        if (ucMotorMode < DEVICE_MOTOR_MODE_NUMBER)
 127   1        {
 128   2          ucMotorMode++;
 129   2        }
 130   1        else
 131   1        {
 132   2          ucMotorMode = DEVICE_MOTOR_CASE_ONE;
 133   2        }
 134   1        VIBMotorLevelBackToLowWithCaseChange();
 135   1        
 136   1        return;
 137   1      }
 138          
 139          /**************************************************************************
 140          * @function name:     DeviceAPP_SetModus
 141          * @Description:       Switch modus
 142          * @param:     
 143          * @return:            NA
 144          * @Author:      
 145          * @Date:      
 146          ***************************************************************************/
 147          void DeviceAPP_SetModus(void)
 148          {
 149   1        if( DEVICE_APP_MODUS_ONE == DeviceApp_GetModus())
 150   1        {
 151   2          DeviceApp_SetAppModus(DEVICE_APP_MODUS_TWO);
 152   2        }
 153   1        else if( DEVICE_APP_MODUS_TWO == DeviceApp_GetModus())
 154   1        {
 155   2          DeviceApp_SetAppModus(DEVICE_APP_MODUS_ONE);
 156   2        }
 157   1        
 158   1        ucMotorMode = DEVICE_MOTOR_CASE_ONE;
 159   1        
 160   1        return;
 161   1      }
 162          /**************************************************************************
 163          * @function name:     DeviceApp_SetAppMode
 164          * @Description:       Motor mmode switch and LED, Motor speed update
 165          * @param:     
 166          * @return:            NA
 167          * @Author:      
 168          * @Date:      
 169          ***************************************************************************/
 170          void DeviceAPP_ModusRun(void)
 171          {
 172   1        UCHAR ucPATDutyTemp = 0;
 173   1        UCHAR ucVIBDutyTemp = 0;
 174   1        
 175   1        MotorThreePlusIndication();
 176   1        
 177   1        if(( DEVICE_APP_MODUS_BOTT== DeviceApp_GetModus()) 
C51 COMPILER V9.54   DEVICE                                                                03/10/2021 14:40:16 PAGE 4   

 178   1          ||(DEVICE_APP_STATE_SLEEP == DeviceApp_GetSystemState())
 179   1          ||(TRUE == IsMotorIndicateProcess()))
 180   1        {
 181   2          return;
 182   2        }
 183   1        /*Temperature or BatteryCapacity over limit, Stop motor*/
 184   1      #ifdef LOWPOWER_DISABLEMOTOR  
                if((TRUE == TemperatureOverStateGet())
                 ||(TRUE == BatteryCapacityStateGet()))
              #else
 188   1        if(TRUE == TemperatureOverStateGet())
 189   1      #endif
 190   1        {
 191   2          VIBMotorDutySet(PWM_DUTY_CYCLE_LEVEL_ZERO);
 192   2          PATMotorDutySet(PWM_DUTY_CYCLE_LEVEL_ZERO);
 193   2          
 194   2          return;
 195   2        }
 196   1      
 197   1        if((TRUE == IsTouchState())|| (FALSE == TOUCH_EN))
 198   1        {
 199   2          MotorSmoothUpdate();
 200   2      
 201   2          ucPATDutyTemp = PATMotorDutyGet();
 202   2          ucVIBDutyTemp = VIBMotorDutyGet();
 203   2      
 204   2          if( DEVICE_APP_MODUS_ONE == DeviceApp_GetModus())
 205   2          {
 206   3          //DeviceUartSendString("DEVICE_APP_MODUS_ONE\r\n");
 207   3            if(DeviceApp_GetMotorMode() == DEVICE_MOTOR_CASE_ONE)
 208   3            {
 209   4              PATMotorDutySet(ucPATDutyTemp);
 210   4              VIBMotorDutySet(ucVIBDutyTemp);
 211   4            }
 212   3            else if(DeviceApp_GetMotorMode() == DEVICE_MOTOR_CASE_TWO)
 213   3            {
 214   4              PATMotorDutySet(ucPATDutyTemp);
 215   4              VIBMotorDutySet(PWM_DUTY_CYCLE_LEVEL_ZERO);
 216   4            }
 217   3            else if(DeviceApp_GetMotorMode() == DEVICE_MOTOR_CASE_THREE)
 218   3            {
 219   4              PATMotorDutySet(PWM_DUTY_CYCLE_LEVEL_ZERO);
 220   4              VIBMotorDutySet(ucVIBDutyTemp);
 221   4            }
 222   3          }
 223   2          else if( DEVICE_APP_MODUS_TWO == DeviceApp_GetModus())
 224   2          {
 225   3              PATMotorDutySet(ucPATDutyTemp);
 226   3              VIBMotorDutySet(ucVIBDutyTemp);
 227   3          }
 228   2        }
 229   1        else
 230   1        {
 231   2          PATMotorDutySet(PWM_DUTY_CYCLE_LEVEL_ZERO);
 232   2          VIBMotorDutySet(PWM_DUTY_CYCLE_LEVEL_ZERO);
 233   2          //LEDOff();
 234   2          MotorSmoothStepClear();
 235   2        }
 236   1       return;
 237   1      }
 238          
 239          /**************************************************************************
C51 COMPILER V9.54   DEVICE                                                                03/10/2021 14:40:16 PAGE 5   

 240          * @function name:     DeviceAutoOff
 241          * @Description:       Auto off 
 242          * @param:     
 243          * @return:      NA
 244          * @Author:      
 245          * @Date:      
 246          ***************************************************************************/
 247          void DeviceAutoOff(void)
 248          {
 249   1      #if 1
 250   1        if((DEVICE_APP_STATE_Charge == DeviceApp_GetSystemState())
 251   1          ||(DEVICE_APP_STATE_SLEEP == DeviceApp_GetSystemState()))
 252   1        {
 253   2          return;
 254   2        }
 255   1      
 256   1        if(TRUE == TOUCH_EN)
 257   1        {
 258   2          if(TRUE == IsTouchState())
 259   2          {
 260   3            boIsDeviceWorkWithTouch = TRUE;
 261   3            usDeviceAutoOff_FiveMin=0;
 262   3            boIsDeviceWorkWithoutTouch=FALSE;
 263   3            /*10 min Off*/
 264   3            if(ucDeviceAutoOff_TenMin2 >= DEVICE_AUTO_OFF_TEN_MINUTES_COUNT)
 265   3            {
 266   4              DeviceOff();
 267   4              //TimerUartSendString("ucDeviceAutoOff_TenMin2\r\n");
 268   4            }
 269   3          }
 270   2          else
 271   2          {
 272   3            boIsDeviceWorkWithTouch = FALSE;
 273   3            ucDeviceAutoOff_TenMin2 =0;
 274   3            usDeviceAutoOff_TenMin1 =0;
 275   3            boIsDeviceWorkWithoutTouch = TRUE;
 276   3            /*5 min Off*/
 277   3            if(usDeviceAutoOff_FiveMin >= DEVICE_AUTO_OFF_FIVE_MINUTES)
 278   3            {
 279   4              DeviceOff();
 280   4              //TimerUartSendString("usDeviceAutoOff_FiveMin\r\n");
 281   4            }
 282   3          }
 283   2        }
 284   1      #endif
 285   1        return;
 286   1      }
 287          /**************************************************************************
 288          * @function name:     DeviceAutoOffCount
 289          * @Description:     
 290          * @param:     
 291          * @return:          NA
 292          * @Author:      
 293          * @Date:      
 294          ***************************************************************************/
 295          void DeviceAutoOffCount(void)
 296          {
 297   1        if(TRUE == boIsDeviceWorkWithTouch)
 298   1        {
 299   2          usDeviceAutoOff_TenMin1++;
 300   2          if(usDeviceAutoOff_TenMin1 >= DEVICE_AUTO_OFF_FIVE_MINUTES)
 301   2          {
C51 COMPILER V9.54   DEVICE                                                                03/10/2021 14:40:16 PAGE 6   

 302   3            ucDeviceAutoOff_TenMin2++;  // 2 cycles meet 10 min
 303   3            usDeviceAutoOff_TenMin1=0;
 304   3          }
 305   2        }
 306   1        else if(TRUE == boIsDeviceWorkWithoutTouch)
 307   1        {
 308   2          usDeviceAutoOff_FiveMin++;
 309   2        }
 310   1        return;
 311   1      }
 312          /**************************************************************************
 313          * @function name:     DeviceAutoOffParamClear
 314          * @Description:     
 315          * @param:     
 316          * @return:          NA
 317          * @Author:      
 318          * @Date:      
 319          ***************************************************************************/
 320          void DeviceAutoOffParamClear(void)
 321          {
 322   1        boIsDeviceWorkWithTouch = FALSE;
 323   1        ucDeviceAutoOff_TenMin2 = 0;
 324   1        usDeviceAutoOff_TenMin1 = 0;
 325   1        boIsDeviceWorkWithoutTouch = FALSE;
 326   1        usDeviceAutoOff_FiveMin = 0;
 327   1        
 328   1        return;
 329   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    439    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     10       2
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
